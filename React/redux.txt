redux:
redux是一个可预测的状态管理的库
state :
    immutably
不可改变的：不能被其他关联事件或意外情况改变，要遵守这个原则；
reducer：
    是纯函数：不会有副作用并且可以预测的函数；

定义：
    react：
        处理数据并渲染到页面；
    redux：
        专门负责管理数据
在一个复杂的项目中，因为react的数据传输的特殊性，
我们有时需要把某些组件的数据传递到其他组件时会相当麻烦，
还有改变某些数据对象内的单个属性时会非常不好管理
这时就需要使用redux 来进行数据的管理；
redux的工作方式：
    reducer=>action=>getState

    redux:
        store
            dispatch
                发起action
            subscribe
                注册监听器
                只要发起action， 注册监听器就会执行
            getState
                拿到整个应用的数据

        action
            一个 plan javascript Object {}
            必须有一个type字段，唯一的
            其它的字段可以任意添加
        action creator
            本意是返回一个对象，也就是action
            当有了中间件的参与， 它就可以返回更多的数据类型
                这个时候，你可以把有副作用的代码写在这里， 把一下逻辑处理放在这里，把你的请求放在这里， 甚至可以是路由的跳转
        绑定好的 action creator
            当你运行这个函数之后， 直接发起一次action， 不用再写 dispatch

        reducer
            纯函数
            接收state action , 返回新的state
            计算出新的state
            state的本质是从reduce
        中间件
            拦截发起的action的请求，然后做一些事情
        applyMiddleware
            激活中间件
        combineReducers
            合并reducer
        bindActionCreators 接收两个参数
            第一个参数
                一个对象， 对象的内容 就是你的 action creator
            第二个参数
                dispatch
            返回一个对象， 对象的内容就是你的 绑定好的 action creator
    react-redux
        Provider
            接收一个store的prop
            你应用的组件放他它的children里
        connect
            只要有一个组件想拿到应用的某些数据(也可以全部)， 交个这个组件的props
            第一个参数
                mapSatateToProps 函数
                接收一个state，这个state是整个应用的state
                返回一个 js对象， 对象的属性会合并到组件的props里面
            第二个参数
                mapDispatchToProps 函数
                接收一个dispatch， 这个dispatch就是store.dispatch,
                返回一个 js对象， 对象的属性会合并到组件的props里面
