Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。

nodejs的特征：
  1.单线程，
  2.使用了一个事件驱动
  3.非阻塞式 I/O 的模型，使其轻量又高效。

非阻塞I/O说白了就是异步
    不用等待前一个走完，下一个就能执行。

nodeJS也是JS，所有操作数组、字符串的Node都支持
最新版的Node也支持ES6

const http = require('http');
引入http后台
创建一个服务器
const server = http.createServer(function(req,res){
  req.url  ：  可以拿到前端的信息
  res.write('hehe')  给前端发送信息
  res.end();
})

const fs = require('fs');

列子：

const http = require('http');
const fs = require('fs');
const URL = require('url');

/*
  /user?act=add&username=xxx&password=xx

  act=add&username=heheda&password=123456
  {
    url:'',
    data:{
      act:'add',
      username:'heheda',
      password:'123456'
    }
  }


*/

const arr = [
  {username:'小管管',password:123456},
  {username:'小秦秦',password:54321},
  {username:'大仙仙',password:123456}
]
http.createServer((request,response)=>{
  if(request.url !== '/favicon.ico'){
    let URLObj = URL.parse(request.url,true);
    //说明走接口
    if(URLObj.pathname === '/user'){
      let obj = {};
      let json = URLObj.query;//queryString将字符串转成对象。

      json.username = decodeURI(json.username);//转码
      if(!json.act){
        obj.code = 3;
        obj.msg = '参数错误';
      }else{
        switch (json.act) {
          case 'add':
            //注册
            if(arr.find(e=>e.username == json.username)){
              //用户名已经被注册
              obj.code = 2;
              obj.msg = '用户名已经被注册';
            }else{
              //注册成功，要把数据放到数据库中
              arr.push({username:json.username,password:json.password})
              obj.code = 0;
              obj.msg = '注册成功';
              obj.users = json.username;
            }
            break;
          case 'login':
            //登录
            /*
              判断是否有这个用户名
              判断，用户名密码是否正确
            */
            let find = arr.find(e=>e.username == json.username);
            //用户存在
            if(find){
              if(json.password == find.password){
                obj.code = 0;
                obj.msg = '登录成功';
                obj.users = json.username;
              }else{
                obj.code = 2;
                obj.msg = '用户名或密码错误';
              }
            }else{
              //用户不存在
              obj.code = 1;
              obj.msg = '没有这个用户';
            }
            break;
          default:
            obj.code = 3;
            obj.msg = '参数错误';
            break;
        }
        //console.log(obj);
        response.write(JSON.stringify(obj));
        response.end();
      }
    }else{
      //说明走静态文件

      let fileName = 'www';

      request.url = (request.url === '/'?'/index.html':request.url)

      fs.readFile(fileName+request.url,(error,data)=>{
        response.write(data);
        response.end();
      });
    }
  }

  // response.write('hello');
  // response.end();
  // console.log(request.url);

}).listen(89);
